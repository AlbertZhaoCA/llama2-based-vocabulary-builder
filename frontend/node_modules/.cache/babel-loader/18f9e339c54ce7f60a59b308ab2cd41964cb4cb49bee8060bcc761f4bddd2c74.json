{"ast":null,"code":"var _jsxFileName = \"/Users/albert/Desktop/web/web/frontend/src/components/divideWords.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useRef } from \"react\";\nimport { Context } from './context';\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dived({\n  str,\n  onWordClick\n}) {\n  _s();\n  const {\n    setSubmited\n  } = useContext(Context);\n  let list = str.split(' ');\n  const wordRefs = useRef([]);\n  useEffect(() => {\n    if (list.length === 1) {\n      setSubmited({\n        word: str,\n        sentence: null\n      });\n      list.filter(item => item.length > 0).map((item, index) => {\n        /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: el => wordRefs.current[index] = el,\n          onClick: () => onWordClick(item, wordRefs.current[index]),\n          children: `   ${item}  `\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }, this);\n      });\n    } else {\n      setSubmited({\n        word: null,\n        sentence: str\n      });\n    }\n  }, [str, setSubmited]);\n}\n_s(Dived, \"oFeCNJJ5CUJRJFlkAAtVu5yRiIw=\");\n_c = Dived;\nvar _c;\n$RefreshReg$(_c, \"Dived\");","map":{"version":3,"names":["useContext","useEffect","useRef","Context","React","jsxDEV","_jsxDEV","Dived","str","onWordClick","_s","setSubmited","list","split","wordRefs","length","word","sentence","filter","item","map","index","ref","el","current","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/albert/Desktop/web/web/frontend/src/components/divideWords.js"],"sourcesContent":["import { useContext,useEffect,useRef } from \"react\";\nimport { Context } from './context';\nimport React from \"react\";\n\n\nexport default function Dived({str,onWordClick}){\n    const {setSubmited} = useContext(Context);\n    let list = str.split(' ');\n    const wordRefs = useRef([]);\n\n    useEffect(() => {\n        if (list.length === 1){\n            setSubmited({ word: str, sentence: null });\n            list.filter(item => item.length > 0).map((item, index) => {\n                <span ref={(el) =>wordRefs.current[index] = el} onClick={()=> onWordClick(item,wordRefs.current[index])} key={index}>{ `   ${item}  ` }</span>});\n        }\n        else{\n            setSubmited({ word: null, sentence: str });\n        }\n    }, [str, setSubmited]);\n\n   \n}\n"],"mappings":";;AAAA,SAASA,UAAU,EAACC,SAAS,EAACC,MAAM,QAAQ,OAAO;AACnD,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,eAAe,SAASC,KAAKA,CAAC;EAACC,GAAG;EAACC;AAAW,CAAC,EAAC;EAAAC,EAAA;EAC5C,MAAM;IAACC;EAAW,CAAC,GAAGX,UAAU,CAACG,OAAO,CAAC;EACzC,IAAIS,IAAI,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EACzB,MAAMC,QAAQ,GAAGZ,MAAM,CAAC,EAAE,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACZ,IAAIW,IAAI,CAACG,MAAM,KAAK,CAAC,EAAC;MAClBJ,WAAW,CAAC;QAAEK,IAAI,EAAER,GAAG;QAAES,QAAQ,EAAE;MAAK,CAAC,CAAC;MAC1CL,IAAI,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC,CAACK,GAAG,CAAC,CAACD,IAAI,EAAEE,KAAK,KAAK;QACtD,aAAAf,OAAA;UAAMgB,GAAG,EAAGC,EAAE,IAAIT,QAAQ,CAACU,OAAO,CAACH,KAAK,CAAC,GAAGE,EAAG;UAACE,OAAO,EAAEA,CAAA,KAAKhB,WAAW,CAACU,IAAI,EAACL,QAAQ,CAACU,OAAO,CAACH,KAAK,CAAC,CAAE;UAAAK,QAAA,EAAgB,MAAKP,IAAK;QAAG,GAAvBE,KAAK;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA0B,CAAC;MAAA,CAAC,CAAC;IACxJ,CAAC,MACG;MACAnB,WAAW,CAAC;QAAEK,IAAI,EAAE,IAAI;QAAEC,QAAQ,EAAET;MAAI,CAAC,CAAC;IAC9C;EACJ,CAAC,EAAE,CAACA,GAAG,EAAEG,WAAW,CAAC,CAAC;AAG1B;AAACD,EAAA,CAjBuBH,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}