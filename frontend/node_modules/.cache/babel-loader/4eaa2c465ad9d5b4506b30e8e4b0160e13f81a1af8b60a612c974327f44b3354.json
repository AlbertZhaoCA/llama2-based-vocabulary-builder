{"ast":null,"code":"import 'whatwg-fetch';\nconst version = \"0.5.0\";\nclass ResponseError extends Error {\n  constructor(error, status_code) {\n    super(error);\n    this.error = error;\n    this.status_code = status_code;\n    this.name = \"ResponseError\";\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ResponseError);\n    }\n  }\n}\nconst checkOk = async response => {\n  if (!response.ok) {\n    let message = `Error ${response.status}: ${response.statusText}`;\n    let errorData = null;\n    if (response.headers.get(\"content-type\")?.includes(\"application/json\")) {\n      try {\n        errorData = await response.json();\n        message = errorData.error || message;\n      } catch (error) {\n        console.log(\"Failed to parse error response as JSON\");\n      }\n    } else {\n      try {\n        console.log(\"Getting text from response\");\n        const textResponse = await response.text();\n        message = textResponse || message;\n      } catch (error) {\n        console.log(\"Failed to get text from error response\");\n      }\n    }\n    throw new ResponseError(message, response.status);\n  }\n};\nfunction getPlatform() {\n  if (typeof window !== \"undefined\" && window.navigator) {\n    return `${window.navigator.platform.toLowerCase()} Browser/${navigator.userAgent};`;\n  } else if (typeof process !== \"undefined\") {\n    return `${process.arch} ${process.platform} Node.js/${process.version}`;\n  }\n  return \"\";\n}\nconst fetchWithHeaders = async (fetch, url, options = {}) => {\n  const defaultHeaders = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"User-Agent\": `ollama-js/${version} (${getPlatform()})`\n  };\n  if (!options.headers) {\n    options.headers = {};\n  }\n  options.headers = {\n    ...defaultHeaders,\n    ...options.headers\n  };\n  return fetch(url, options);\n};\nconst get = async (fetch, host) => {\n  const response = await fetchWithHeaders(fetch, host);\n  await checkOk(response);\n  return response;\n};\nconst head = async (fetch, host) => {\n  const response = await fetchWithHeaders(fetch, host, {\n    method: \"HEAD\"\n  });\n  await checkOk(response);\n  return response;\n};\nconst post = async (fetch, host, data, options) => {\n  const isRecord = input => {\n    return input !== null && typeof input === \"object\" && !Array.isArray(input);\n  };\n  const formattedData = isRecord(data) ? JSON.stringify(data) : data;\n  const response = await fetchWithHeaders(fetch, host, {\n    method: \"POST\",\n    body: formattedData,\n    signal: options?.signal\n  });\n  await checkOk(response);\n  return response;\n};\nconst del = async (fetch, host, data) => {\n  const response = await fetchWithHeaders(fetch, host, {\n    method: \"DELETE\",\n    body: JSON.stringify(data)\n  });\n  await checkOk(response);\n  return response;\n};\nconst parseJSON = async function* (itr) {\n  const decoder = new TextDecoder(\"utf-8\");\n  let buffer = \"\";\n  const reader = itr.getReader();\n  while (true) {\n    const {\n      done,\n      value: chunk\n    } = await reader.read();\n    if (done) {\n      break;\n    }\n    buffer += decoder.decode(chunk);\n    const parts = buffer.split(\"\\n\");\n    buffer = parts.pop() ?? \"\";\n    for (const part of parts) {\n      try {\n        yield JSON.parse(part);\n      } catch (error) {\n        console.warn(\"invalid json: \", part);\n      }\n    }\n  }\n  for (const part of buffer.split(\"\\n\").filter(p => p !== \"\")) {\n    try {\n      yield JSON.parse(part);\n    } catch (error) {\n      console.warn(\"invalid json: \", part);\n    }\n  }\n};\nconst formatHost = host => {\n  if (!host) {\n    return \"http://127.0.0.1:11434\";\n  }\n  let isExplicitProtocol = host.includes(\"://\");\n  if (host.startsWith(\":\")) {\n    host = `http://127.0.0.1${host}`;\n    isExplicitProtocol = false;\n  }\n  if (!isExplicitProtocol) {\n    host = `http://${host}`;\n  }\n  const url = new URL(host);\n  let port = url.port;\n  if (!port) {\n    if (!isExplicitProtocol) {\n      port = \"11434\";\n    } else {\n      port = url.protocol === \"https:\" ? \"443\" : \"80\";\n    }\n  }\n  let formattedHost = `${url.protocol}//${url.hostname}:${port}${url.pathname}`;\n  if (formattedHost.endsWith(\"/\")) {\n    formattedHost = formattedHost.slice(0, -1);\n  }\n  return formattedHost;\n};\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nlet Ollama$1 = class Ollama {\n  constructor(config) {\n    __publicField(this, \"config\");\n    __publicField(this, \"fetch\");\n    __publicField(this, \"abortController\");\n    this.config = {\n      host: \"\"\n    };\n    if (!config?.proxy) {\n      this.config.host = formatHost(config?.host ?? \"http://127.0.0.1:11434\");\n    }\n    this.fetch = fetch;\n    if (config?.fetch != null) {\n      this.fetch = config.fetch;\n    }\n    this.abortController = new AbortController();\n  }\n  // Abort any ongoing requests to Ollama\n  abort() {\n    this.abortController.abort();\n    this.abortController = new AbortController();\n  }\n  async processStreamableRequest(endpoint, request) {\n    request.stream = request.stream ?? false;\n    const response = await post(this.fetch, `${this.config.host}/api/${endpoint}`, {\n      ...request\n    }, {\n      signal: this.abortController.signal\n    });\n    if (!response.body) {\n      throw new Error(\"Missing body\");\n    }\n    const itr = parseJSON(response.body);\n    if (request.stream) {\n      return async function* () {\n        for await (const message of itr) {\n          if (\"error\" in message) {\n            throw new Error(message.error);\n          }\n          yield message;\n          if (message.done || message.status === \"success\") {\n            return;\n          }\n        }\n        throw new Error(\"Did not receive done or success response in stream.\");\n      }();\n    } else {\n      const message = await itr.next();\n      if (!message.value.done && message.value.status !== \"success\") {\n        throw new Error(\"Expected a completed response.\");\n      }\n      return message.value;\n    }\n  }\n  async encodeImage(image) {\n    if (typeof image !== \"string\") {\n      const uint8Array = new Uint8Array(image);\n      const numberArray = Array.from(uint8Array);\n      const base64String = btoa(String.fromCharCode.apply(null, numberArray));\n      return base64String;\n    }\n    return image;\n  }\n  async generate(request) {\n    if (request.images) {\n      request.images = await Promise.all(request.images.map(this.encodeImage.bind(this)));\n    }\n    return this.processStreamableRequest(\"generate\", request);\n  }\n  async chat(request) {\n    if (request.messages) {\n      for (const message of request.messages) {\n        if (message.images) {\n          message.images = await Promise.all(message.images.map(this.encodeImage.bind(this)));\n        }\n      }\n    }\n    return this.processStreamableRequest(\"chat\", request);\n  }\n  async create(request) {\n    return this.processStreamableRequest(\"create\", {\n      name: request.model,\n      stream: request.stream,\n      modelfile: request.modelfile\n    });\n  }\n  async pull(request) {\n    return this.processStreamableRequest(\"pull\", {\n      name: request.model,\n      stream: request.stream,\n      insecure: request.insecure\n    });\n  }\n  async push(request) {\n    return this.processStreamableRequest(\"push\", {\n      name: request.model,\n      stream: request.stream,\n      insecure: request.insecure\n    });\n  }\n  async delete(request) {\n    await del(this.fetch, `${this.config.host}/api/delete`, {\n      name: request.model\n    });\n    return {\n      status: \"success\"\n    };\n  }\n  async copy(request) {\n    await post(this.fetch, `${this.config.host}/api/copy`, {\n      ...request\n    });\n    return {\n      status: \"success\"\n    };\n  }\n  async list() {\n    const response = await get(this.fetch, `${this.config.host}/api/tags`);\n    const listResponse = await response.json();\n    return listResponse;\n  }\n  async show(request) {\n    const response = await post(this.fetch, `${this.config.host}/api/show`, {\n      ...request\n    });\n    const showResponse = await response.json();\n    return showResponse;\n  }\n  async embeddings(request) {\n    const response = await post(this.fetch, `${this.config.host}/api/embeddings`, {\n      ...request\n    });\n    const embeddingsResponse = await response.json();\n    return embeddingsResponse;\n  }\n};\nconst browser = new Ollama$1();\nexport { Ollama$1 as O, browser as b, head as h, post as p };","map":{"version":3,"names":["version","ResponseError","Error","constructor","error","status_code","name","captureStackTrace","checkOk","response","ok","message","status","statusText","errorData","headers","get","includes","json","console","log","textResponse","text","getPlatform","window","navigator","platform","toLowerCase","userAgent","process","arch","fetchWithHeaders","fetch","url","options","defaultHeaders","Accept","host","head","method","post","data","isRecord","input","Array","isArray","formattedData","JSON","stringify","body","signal","del","parseJSON","itr","decoder","TextDecoder","buffer","reader","getReader","done","value","chunk","read","decode","parts","split","pop","part","parse","warn","filter","p","formatHost","isExplicitProtocol","startsWith","URL","port","protocol","formattedHost","hostname","pathname","endsWith","slice","__defProp","Object","defineProperty","__defNormalProp","obj","key","enumerable","configurable","writable","__publicField","Ollama$1","Ollama","config","proxy","abortController","AbortController","abort","processStreamableRequest","endpoint","request","stream","next","encodeImage","image","uint8Array","Uint8Array","numberArray","from","base64String","btoa","String","fromCharCode","apply","generate","images","Promise","all","map","bind","chat","messages","create","model","modelfile","pull","insecure","push","delete","copy","list","listResponse","show","showResponse","embeddings","embeddingsResponse","browser","O","b","h"],"sources":["/Users/albert/Desktop/web/web/node_modules/ollama/dist/shared/ollama.be8fd0da.mjs"],"sourcesContent":["import 'whatwg-fetch';\n\nconst version = \"0.5.0\";\n\nclass ResponseError extends Error {\n  constructor(error, status_code) {\n    super(error);\n    this.error = error;\n    this.status_code = status_code;\n    this.name = \"ResponseError\";\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ResponseError);\n    }\n  }\n}\nconst checkOk = async (response) => {\n  if (!response.ok) {\n    let message = `Error ${response.status}: ${response.statusText}`;\n    let errorData = null;\n    if (response.headers.get(\"content-type\")?.includes(\"application/json\")) {\n      try {\n        errorData = await response.json();\n        message = errorData.error || message;\n      } catch (error) {\n        console.log(\"Failed to parse error response as JSON\");\n      }\n    } else {\n      try {\n        console.log(\"Getting text from response\");\n        const textResponse = await response.text();\n        message = textResponse || message;\n      } catch (error) {\n        console.log(\"Failed to get text from error response\");\n      }\n    }\n    throw new ResponseError(message, response.status);\n  }\n};\nfunction getPlatform() {\n  if (typeof window !== \"undefined\" && window.navigator) {\n    return `${window.navigator.platform.toLowerCase()} Browser/${navigator.userAgent};`;\n  } else if (typeof process !== \"undefined\") {\n    return `${process.arch} ${process.platform} Node.js/${process.version}`;\n  }\n  return \"\";\n}\nconst fetchWithHeaders = async (fetch, url, options = {}) => {\n  const defaultHeaders = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"User-Agent\": `ollama-js/${version} (${getPlatform()})`\n  };\n  if (!options.headers) {\n    options.headers = {};\n  }\n  options.headers = {\n    ...defaultHeaders,\n    ...options.headers\n  };\n  return fetch(url, options);\n};\nconst get = async (fetch, host) => {\n  const response = await fetchWithHeaders(fetch, host);\n  await checkOk(response);\n  return response;\n};\nconst head = async (fetch, host) => {\n  const response = await fetchWithHeaders(fetch, host, {\n    method: \"HEAD\"\n  });\n  await checkOk(response);\n  return response;\n};\nconst post = async (fetch, host, data, options) => {\n  const isRecord = (input) => {\n    return input !== null && typeof input === \"object\" && !Array.isArray(input);\n  };\n  const formattedData = isRecord(data) ? JSON.stringify(data) : data;\n  const response = await fetchWithHeaders(fetch, host, {\n    method: \"POST\",\n    body: formattedData,\n    signal: options?.signal\n  });\n  await checkOk(response);\n  return response;\n};\nconst del = async (fetch, host, data) => {\n  const response = await fetchWithHeaders(fetch, host, {\n    method: \"DELETE\",\n    body: JSON.stringify(data)\n  });\n  await checkOk(response);\n  return response;\n};\nconst parseJSON = async function* (itr) {\n  const decoder = new TextDecoder(\"utf-8\");\n  let buffer = \"\";\n  const reader = itr.getReader();\n  while (true) {\n    const { done, value: chunk } = await reader.read();\n    if (done) {\n      break;\n    }\n    buffer += decoder.decode(chunk);\n    const parts = buffer.split(\"\\n\");\n    buffer = parts.pop() ?? \"\";\n    for (const part of parts) {\n      try {\n        yield JSON.parse(part);\n      } catch (error) {\n        console.warn(\"invalid json: \", part);\n      }\n    }\n  }\n  for (const part of buffer.split(\"\\n\").filter((p) => p !== \"\")) {\n    try {\n      yield JSON.parse(part);\n    } catch (error) {\n      console.warn(\"invalid json: \", part);\n    }\n  }\n};\nconst formatHost = (host) => {\n  if (!host) {\n    return \"http://127.0.0.1:11434\";\n  }\n  let isExplicitProtocol = host.includes(\"://\");\n  if (host.startsWith(\":\")) {\n    host = `http://127.0.0.1${host}`;\n    isExplicitProtocol = false;\n  }\n  if (!isExplicitProtocol) {\n    host = `http://${host}`;\n  }\n  const url = new URL(host);\n  let port = url.port;\n  if (!port) {\n    if (!isExplicitProtocol) {\n      port = \"11434\";\n    } else {\n      port = url.protocol === \"https:\" ? \"443\" : \"80\";\n    }\n  }\n  let formattedHost = `${url.protocol}//${url.hostname}:${port}${url.pathname}`;\n  if (formattedHost.endsWith(\"/\")) {\n    formattedHost = formattedHost.slice(0, -1);\n  }\n  return formattedHost;\n};\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nlet Ollama$1 = class Ollama {\n  constructor(config) {\n    __publicField(this, \"config\");\n    __publicField(this, \"fetch\");\n    __publicField(this, \"abortController\");\n    this.config = {\n      host: \"\"\n    };\n    if (!config?.proxy) {\n      this.config.host = formatHost(config?.host ?? \"http://127.0.0.1:11434\");\n    }\n    this.fetch = fetch;\n    if (config?.fetch != null) {\n      this.fetch = config.fetch;\n    }\n    this.abortController = new AbortController();\n  }\n  // Abort any ongoing requests to Ollama\n  abort() {\n    this.abortController.abort();\n    this.abortController = new AbortController();\n  }\n  async processStreamableRequest(endpoint, request) {\n    request.stream = request.stream ?? false;\n    const response = await post(\n      this.fetch,\n      `${this.config.host}/api/${endpoint}`,\n      {\n        ...request\n      },\n      { signal: this.abortController.signal }\n    );\n    if (!response.body) {\n      throw new Error(\"Missing body\");\n    }\n    const itr = parseJSON(response.body);\n    if (request.stream) {\n      return async function* () {\n        for await (const message of itr) {\n          if (\"error\" in message) {\n            throw new Error(message.error);\n          }\n          yield message;\n          if (message.done || message.status === \"success\") {\n            return;\n          }\n        }\n        throw new Error(\"Did not receive done or success response in stream.\");\n      }();\n    } else {\n      const message = await itr.next();\n      if (!message.value.done && message.value.status !== \"success\") {\n        throw new Error(\"Expected a completed response.\");\n      }\n      return message.value;\n    }\n  }\n  async encodeImage(image) {\n    if (typeof image !== \"string\") {\n      const uint8Array = new Uint8Array(image);\n      const numberArray = Array.from(uint8Array);\n      const base64String = btoa(String.fromCharCode.apply(null, numberArray));\n      return base64String;\n    }\n    return image;\n  }\n  async generate(request) {\n    if (request.images) {\n      request.images = await Promise.all(request.images.map(this.encodeImage.bind(this)));\n    }\n    return this.processStreamableRequest(\"generate\", request);\n  }\n  async chat(request) {\n    if (request.messages) {\n      for (const message of request.messages) {\n        if (message.images) {\n          message.images = await Promise.all(\n            message.images.map(this.encodeImage.bind(this))\n          );\n        }\n      }\n    }\n    return this.processStreamableRequest(\"chat\", request);\n  }\n  async create(request) {\n    return this.processStreamableRequest(\"create\", {\n      name: request.model,\n      stream: request.stream,\n      modelfile: request.modelfile\n    });\n  }\n  async pull(request) {\n    return this.processStreamableRequest(\"pull\", {\n      name: request.model,\n      stream: request.stream,\n      insecure: request.insecure\n    });\n  }\n  async push(request) {\n    return this.processStreamableRequest(\"push\", {\n      name: request.model,\n      stream: request.stream,\n      insecure: request.insecure\n    });\n  }\n  async delete(request) {\n    await del(this.fetch, `${this.config.host}/api/delete`, {\n      name: request.model\n    });\n    return { status: \"success\" };\n  }\n  async copy(request) {\n    await post(this.fetch, `${this.config.host}/api/copy`, { ...request });\n    return { status: \"success\" };\n  }\n  async list() {\n    const response = await get(this.fetch, `${this.config.host}/api/tags`);\n    const listResponse = await response.json();\n    return listResponse;\n  }\n  async show(request) {\n    const response = await post(this.fetch, `${this.config.host}/api/show`, {\n      ...request\n    });\n    const showResponse = await response.json();\n    return showResponse;\n  }\n  async embeddings(request) {\n    const response = await post(this.fetch, `${this.config.host}/api/embeddings`, {\n      ...request\n    });\n    const embeddingsResponse = await response.json();\n    return embeddingsResponse;\n  }\n};\nconst browser = new Ollama$1();\n\nexport { Ollama$1 as O, browser as b, head as h, post as p };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}