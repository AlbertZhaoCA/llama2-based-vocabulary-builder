{"ast":null,"code":"var _jsxFileName = \"/Users/albert/Desktop/web/web/frontend/src/components/divideWords.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useRef } from \"react\";\nimport { Context } from './context';\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dived({\n  str,\n  onWordClick\n}) {\n  _s();\n  const {\n    setSubmited\n  } = useContext(Context);\n  let list = str.split(' ');\n  const wordRefs = useRef([]);\n  const spanElementsRef = useRef(null);\n  useEffect(() => {\n    if (list.length === 1) {\n      setSubmited({\n        word: str,\n        sentence: null\n      });\n      spanElementsRef.current = list.filter(item => item.length > 0).map((item, index) => {\n        /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: el => wordRefs.current[index] = el,\n          onClick: () => onWordClick(item, wordRefs.current[index]),\n          children: `   ${item}  `\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }, this);\n      });\n    } else {\n      setSubmited({\n        word: null,\n        sentence: str\n      });\n      spanElementsRef.current = list.filter(item => item.length > 0).map((item, index) => {\n        /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: el => wordRefs.current[index] = el,\n          onClick: () => onWordClick(item, wordRefs.current[index]),\n          children: `   ${item}  `\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this);\n      });\n    }\n  }, [str, setSubmited]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: spanElementsRef.current\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(Dived, \"D0RBucNAnZEVCynfdTxey0px3Wg=\");\n_c = Dived;\nvar _c;\n$RefreshReg$(_c, \"Dived\");","map":{"version":3,"names":["useContext","useEffect","useRef","Context","React","jsxDEV","_jsxDEV","Dived","str","onWordClick","_s","setSubmited","list","split","wordRefs","spanElementsRef","length","word","sentence","current","filter","item","map","index","ref","el","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/albert/Desktop/web/web/frontend/src/components/divideWords.js"],"sourcesContent":["import { useContext,useEffect,useRef } from \"react\";\nimport { Context } from './context';\nimport React from \"react\";\n\n\nexport default function Dived({str,onWordClick}){\n    const {setSubmited} = useContext(Context);\n    let list = str.split(' ');\n    const wordRefs = useRef([]);\n    const spanElementsRef = useRef(null);\n\n\n    useEffect(() => {\n        if (list.length === 1){\n            setSubmited({ word: str, sentence: null });\n            spanElementsRef.current = list.filter(item => item.length > 0).map((item, index) => {\n                <span ref={(el) =>wordRefs.current[index] = el} onClick={()=> onWordClick(item,wordRefs.current[index])} key={index}>{ `   ${item}  ` }</span>}\n            );\n        }\n        else{\n            setSubmited({ word: null, sentence: str });\n            spanElementsRef.current = list.filter(item => item.length > 0).map((item, index) => {\n                <span ref={(el) =>wordRefs.current[index] = el} onClick={()=> onWordClick(item,wordRefs.current[index])} key={index}>{ `   ${item}  ` }</span>}\n            );\n        }\n    }, [str, setSubmited]);\n    \n    return (\n        <div>\n            {spanElementsRef.current}\n        </div>);\n   \n}\n"],"mappings":";;AAAA,SAASA,UAAU,EAACC,SAAS,EAACC,MAAM,QAAQ,OAAO;AACnD,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,eAAe,SAASC,KAAKA,CAAC;EAACC,GAAG;EAACC;AAAW,CAAC,EAAC;EAAAC,EAAA;EAC5C,MAAM;IAACC;EAAW,CAAC,GAAGX,UAAU,CAACG,OAAO,CAAC;EACzC,IAAIS,IAAI,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EACzB,MAAMC,QAAQ,GAAGZ,MAAM,CAAC,EAAE,CAAC;EAC3B,MAAMa,eAAe,GAAGb,MAAM,CAAC,IAAI,CAAC;EAGpCD,SAAS,CAAC,MAAM;IACZ,IAAIW,IAAI,CAACI,MAAM,KAAK,CAAC,EAAC;MAClBL,WAAW,CAAC;QAAEM,IAAI,EAAET,GAAG;QAAEU,QAAQ,EAAE;MAAK,CAAC,CAAC;MAC1CH,eAAe,CAACI,OAAO,GAAGP,IAAI,CAACQ,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACL,MAAM,GAAG,CAAC,CAAC,CAACM,GAAG,CAAC,CAACD,IAAI,EAAEE,KAAK,KAAK;QAChF,aAAAjB,OAAA;UAAMkB,GAAG,EAAGC,EAAE,IAAIX,QAAQ,CAACK,OAAO,CAACI,KAAK,CAAC,GAAGE,EAAG;UAACC,OAAO,EAAEA,CAAA,KAAKjB,WAAW,CAACY,IAAI,EAACP,QAAQ,CAACK,OAAO,CAACI,KAAK,CAAC,CAAE;UAAAI,QAAA,EAAgB,MAAKN,IAAK;QAAG,GAAvBE,KAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA0B,CAAC;MAAA,CAClJ,CAAC;IACL,CAAC,MACG;MACApB,WAAW,CAAC;QAAEM,IAAI,EAAE,IAAI;QAAEC,QAAQ,EAAEV;MAAI,CAAC,CAAC;MAC1CO,eAAe,CAACI,OAAO,GAAGP,IAAI,CAACQ,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACL,MAAM,GAAG,CAAC,CAAC,CAACM,GAAG,CAAC,CAACD,IAAI,EAAEE,KAAK,KAAK;QAChF,aAAAjB,OAAA;UAAMkB,GAAG,EAAGC,EAAE,IAAIX,QAAQ,CAACK,OAAO,CAACI,KAAK,CAAC,GAAGE,EAAG;UAACC,OAAO,EAAEA,CAAA,KAAKjB,WAAW,CAACY,IAAI,EAACP,QAAQ,CAACK,OAAO,CAACI,KAAK,CAAC,CAAE;UAAAI,QAAA,EAAgB,MAAKN,IAAK;QAAG,GAAvBE,KAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA0B,CAAC;MAAA,CAClJ,CAAC;IACL;EACJ,CAAC,EAAE,CAACvB,GAAG,EAAEG,WAAW,CAAC,CAAC;EAEtB,oBACIL,OAAA;IAAAqB,QAAA,EACKZ,eAAe,CAACI;EAAO;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEd;AAACrB,EAAA,CA3BuBH,KAAK;AAAAyB,EAAA,GAALzB,KAAK;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}