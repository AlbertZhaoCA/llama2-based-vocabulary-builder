{"ast":null,"code":"import React, { useState } from 'react';\nimport '../App.css';\nimport { InputWithButton, Input } from './Input';\nimport { Context } from './context';\nimport { Button } from './Button';\nimport Dived from './divideWords';\nasync function searchVocab(word) {\n  try {\n    console.log(word);\n    let resp = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n    if (!resp.ok) {\n      if (resp.status === 404) {\n        throw new Error('Word not found in the dictionary');\n      }\n      let error = await resp.text();\n      throw new Error(error);\n    }\n    let data = await resp.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    return null;\n  }\n}\nfunction addHandler({\n  word,\n  sentence = inputValue\n}) {\n  return async event => {\n    event.preventDefault();\n    let newVocab = {\n      '单词': '',\n      '解释': '',\n      '背景': sentence ? sentence : ''\n    };\n    if (word) {\n      newVocab['单词'] = word;\n    } else {\n      newVocab['单词'] = sentence.slice(4);\n    }\n    searchVocab(word).then(responseData => {\n      var _responseData$0$phone, _responseData$, _responseData$$phonet, _responseData$$phonet2;\n      console.log(responseData);\n      if (word) newVocab['单词'] = `${word}  ${(_responseData$0$phone = responseData === null || responseData === void 0 ? void 0 : (_responseData$ = responseData[0]) === null || _responseData$ === void 0 ? void 0 : (_responseData$$phonet = _responseData$.phonetics) === null || _responseData$$phonet === void 0 ? void 0 : (_responseData$$phonet2 = _responseData$$phonet[0]) === null || _responseData$$phonet2 === void 0 ? void 0 : _responseData$$phonet2.text) !== null && _responseData$0$phone !== void 0 ? _responseData$0$phone : ''}`;\n    });\n    const data = {\n      word: word,\n      sentence: sentence\n    };\n    await fetch('http://localhost:10001/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      const reader = response.body.getReader();\n      return new ReadableStream({\n        start(controller) {\n          function push() {\n            reader.read().then(({\n              done,\n              value\n            }) => {\n              if (done) {\n                setInputValue('');\n                controller.close();\n                return;\n              }\n              const text = new TextDecoder('utf-8').decode(value);\n              console.log(text);\n              const cleanedText = text.replace(/(data: .*?)\\s*(?=data:|$)/g, '$1').replace(/data: /g, '');\n              newVocab['解释'] += cleanedText;\n              setVocabList([...vocabList, newVocab]);\n              push();\n            });\n          }\n          push();\n        }\n      });\n    }).then(stream => {\n      return new Response(stream, {\n        headers: {\n          'Content-Type': 'text/html'\n        }\n      }).text();\n    }).then(result => {\n      console.log(result);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n}\nexport default App;","map":{"version":3,"names":["React","useState","InputWithButton","Input","Context","Button","Dived","searchVocab","word","console","log","resp","fetch","ok","status","Error","error","text","data","json","addHandler","sentence","inputValue","event","preventDefault","newVocab","slice","then","responseData","_responseData$0$phone","_responseData$","_responseData$$phonet","_responseData$$phonet2","phonetics","method","headers","body","JSON","stringify","response","reader","getReader","ReadableStream","start","controller","push","read","done","value","setInputValue","close","TextDecoder","decode","cleanedText","replace","setVocabList","vocabList","stream","Response","result","catch","App"],"sources":["/Users/albert/Desktop/web/web/frontend/src/components/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../App.css';\nimport { InputWithButton,Input } from './Input';\nimport { Context } from './context';\nimport { Button } from './Button';\nimport  Dived  from './divideWords';\n\nasync function searchVocab(word) {\n  try {\n    console.log(word);\n    let resp = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n    if (!resp.ok) {\n      if (resp.status === 404) {\n        throw new Error('Word not found in the dictionary');\n      }\n      let error = await resp.text();\n      throw new Error(error);\n    }\n    let data = await resp.json();\n\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    return null;\n  }\n}\n\n  function addHandler({ word, sentence = inputValue }) {\n    return async (event) => {\n      event.preventDefault();\n      let newVocab = {\n        '单词': '',\n        '解释': '',\n        '背景': sentence ? sentence : '',\n      };\n      if (word) {\n        newVocab['单词'] = word;\n      } else {\n        newVocab['单词'] = sentence.slice(4);\n      }\n\n      searchVocab(word).then((responseData) => {\n        console.log(responseData);\n        if (word) newVocab['单词'] = `${word}  ${responseData?.[0]?.phonetics?.[0]?.text ?? ''}`;\n      });\n      const data = { word: word, sentence: sentence };\n      await fetch('http://localhost:10001/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      })\n        .then((response) => {\n          const reader = response.body.getReader();\n          return new ReadableStream({\n            start(controller) {\n              function push() {\n                reader.read().then(({ done, value }) => {\n                  if (done) {\n                    setInputValue('');\n                    controller.close();\n                    return;\n                  }\n                  const text = new TextDecoder('utf-8').decode(value);\n                  console.log(text);\n                  const cleanedText = text.replace(/(data: .*?)\\s*(?=data:|$)/g, '$1').replace(/data: /g, '');\n                  newVocab['解释'] += cleanedText;\n                  setVocabList([...vocabList, newVocab]);\n\n                  push();\n                });\n              }\n              push();\n            },\n          });\n        })\n        .then((stream) => {\n          return new Response(stream, { headers: { 'Content-Type': 'text/html' } }).text();\n        })\n        .then((result) => {\n          console.log(result);\n        })\n        .catch((error) => {\n          console.error('Error:', error);\n        });\n    };\n  }\n\nexport default App;\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}