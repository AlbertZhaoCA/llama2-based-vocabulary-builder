{"ast":null,"code":"import{useContext,useEffect,useRef,useMemo}from\"react\";import{Context}from'./context';import React from\"react\";import{v4 as uuidv4}from'uuid';import{jsx as _jsx}from\"react/jsx-runtime\";export default function Dived(_ref){let{str,onWordClick}=_ref;const{setSubmited}=useContext(Context);const list=useMemo(()=>str.split(' ').map(word=>({id:uuidv4(),word})),[str]);const wordRefs=useRef([]);useEffect(()=>{wordRefs.current=list.map(()=>/*#__PURE__*/React.createRef());if(list.length===1){setSubmited({word:str,sentence:null});}else{setSubmited({word:null,sentence:str});}},[str,setSubmited,list]);return/*#__PURE__*/_jsx(\"div\",{children:list.filter(item=>item.word.length>0).map((item,index)=>/*#__PURE__*/_jsx(\"span\",{ref:el=>wordRefs.current[index]=el,onClick:()=>onWordClick(item.word,wordRefs.current[index]),children:\"   \".concat(item.word,\"  \")},item.id))});}","map":{"version":3,"names":["useContext","useEffect","useRef","useMemo","Context","React","v4","uuidv4","jsx","_jsx","Dived","_ref","str","onWordClick","setSubmited","list","split","map","word","id","wordRefs","current","createRef","length","sentence","children","filter","item","index","ref","el","onClick","concat"],"sources":["/Users/albert/Desktop/web/web/frontend/src/components/divideWords.js"],"sourcesContent":["import { useContext, useEffect, useRef, useMemo } from \"react\";\nimport { Context } from './context';\nimport React from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default function Dived({str,onWordClick}){\n    const {setSubmited} = useContext(Context);\n    const list = useMemo(() => str.split(' ').map(word => ({ id: uuidv4(), word })), [str]);\n    const wordRefs = useRef([]);\n\n    useEffect(() => {\n        wordRefs.current = list.map(() => React.createRef());\n        if (list.length === 1){\n            setSubmited({ word: str, sentence: null });\n        }\n        else{\n            setSubmited({ word: null, sentence: str });\n        }\n    }, [str, setSubmited, list]);\n\n    return (\n        <div>\n            {list.filter(item => item.word.length > 0).map((item, index) => (\n                <span \n                    ref={el => wordRefs.current[index] = el} \n                    onClick={() => onWordClick(item.word, wordRefs.current[index])} \n                    key={item.id}\n                >\n                    {`   ${item.word}  `}\n                </span>\n            ))}\n        </div>\n    );\n}"],"mappings":"AAAA,OAASA,UAAU,CAAEC,SAAS,CAAEC,MAAM,CAAEC,OAAO,KAAQ,OAAO,CAC9D,OAASC,OAAO,KAAQ,WAAW,CACnC,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,OAASC,EAAE,GAAI,CAAAC,MAAM,KAAQ,MAAM,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpC,cAAe,SAAS,CAAAC,KAAKA,CAAAC,IAAA,CAAmB,IAAlB,CAACC,GAAG,CAACC,WAAW,CAAC,CAAAF,IAAA,CAC3C,KAAM,CAACG,WAAW,CAAC,CAAGd,UAAU,CAACI,OAAO,CAAC,CACzC,KAAM,CAAAW,IAAI,CAAGZ,OAAO,CAAC,IAAMS,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,GAAK,CAAEC,EAAE,CAAEZ,MAAM,CAAC,CAAC,CAAEW,IAAK,CAAC,CAAC,CAAC,CAAE,CAACN,GAAG,CAAC,CAAC,CACvF,KAAM,CAAAQ,QAAQ,CAAGlB,MAAM,CAAC,EAAE,CAAC,CAE3BD,SAAS,CAAC,IAAM,CACZmB,QAAQ,CAACC,OAAO,CAAGN,IAAI,CAACE,GAAG,CAAC,iBAAMZ,KAAK,CAACiB,SAAS,CAAC,CAAC,CAAC,CACpD,GAAIP,IAAI,CAACQ,MAAM,GAAK,CAAC,CAAC,CAClBT,WAAW,CAAC,CAAEI,IAAI,CAAEN,GAAG,CAAEY,QAAQ,CAAE,IAAK,CAAC,CAAC,CAC9C,CAAC,IACG,CACAV,WAAW,CAAC,CAAEI,IAAI,CAAE,IAAI,CAAEM,QAAQ,CAAEZ,GAAI,CAAC,CAAC,CAC9C,CACJ,CAAC,CAAE,CAACA,GAAG,CAAEE,WAAW,CAAEC,IAAI,CAAC,CAAC,CAE5B,mBACIN,IAAA,QAAAgB,QAAA,CACKV,IAAI,CAACW,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACT,IAAI,CAACK,MAAM,CAAG,CAAC,CAAC,CAACN,GAAG,CAAC,CAACU,IAAI,CAAEC,KAAK,gBACvDnB,IAAA,SACIoB,GAAG,CAAEC,EAAE,EAAIV,QAAQ,CAACC,OAAO,CAACO,KAAK,CAAC,CAAGE,EAAG,CACxCC,OAAO,CAAEA,CAAA,GAAMlB,WAAW,CAACc,IAAI,CAACT,IAAI,CAAEE,QAAQ,CAACC,OAAO,CAACO,KAAK,CAAC,CAAE,CAAAH,QAAA,OAAAO,MAAA,CAGxDL,IAAI,CAACT,IAAI,QAFXS,IAAI,CAACR,EAGR,CACT,CAAC,CACD,CAAC,CAEd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}