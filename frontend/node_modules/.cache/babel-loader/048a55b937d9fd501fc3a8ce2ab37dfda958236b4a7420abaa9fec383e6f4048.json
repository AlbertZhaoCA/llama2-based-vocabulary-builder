{"ast":null,"code":"var _jsxFileName = \"/home/albert/kbvb/frontend/src/components/divideWords.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useRef } from \"react\";\nimport { Context } from './context';\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dived({\n  str,\n  onWordClick\n}) {\n  _s();\n  const {\n    setSubmited\n  } = useContext(Context);\n  let list = str.split(' ');\n  const spanRefs = useRef(list.map(() => /*#__PURE__*/React.createRef()));\n  useEffect(() => {\n    if (list.length === 1) setSubmited({\n      word: str,\n      sentence: null\n    });else setSubmited({\n      word: null,\n      sentence: str\n    });\n  }, [str, setSubmited]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: list.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        ref: spanRefs.current,\n        onClick: () => onWordClick(item, alertted = spanRefs.current[index]),\n        children: `   ${item}  `\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n_s(Dived, \"IskulNlPNc0ExofDSmR3P7Z0G8A=\");\n_c = Dived;\nvar _c;\n$RefreshReg$(_c, \"Dived\");","map":{"version":3,"names":["useContext","useEffect","useRef","Context","React","jsxDEV","_jsxDEV","Dived","str","onWordClick","_s","setSubmited","list","split","spanRefs","map","createRef","length","word","sentence","children","item","index","ref","current","onClick","alertted","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/albert/kbvb/frontend/src/components/divideWords.js"],"sourcesContent":["import { useContext,useEffect,useRef } from \"react\";\nimport { Context } from './context';\nimport React from \"react\";\n\nexport default function Dived({str,onWordClick}){\n    const {setSubmited} = useContext(Context);\n    let list = str.split(' ');\n    const spanRefs = useRef(list.map(() => React.createRef()));\n    useEffect(() => {\n        if (list.length === 1)\n            setSubmited({ word: str, sentence: null });\n        else\n            setSubmited({ word: null, sentence: str });\n    }, [str, setSubmited]);\n\n    return (\n        <div>\n            {list.map((item, index) => {\n                return <span ref={spanRefs.current} onClick={()=> onWordClick(item,alertted = spanRefs.current[index])} key={index}>{ `   ${item}  ` }</span>\n            })}\n        </div>\n    )\n}\n"],"mappings":";;AAAA,SAASA,UAAU,EAACC,SAAS,EAACC,MAAM,QAAQ,OAAO;AACnD,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,KAAKA,CAAC;EAACC,GAAG;EAACC;AAAW,CAAC,EAAC;EAAAC,EAAA;EAC5C,MAAM;IAACC;EAAW,CAAC,GAAGX,UAAU,CAACG,OAAO,CAAC;EACzC,IAAIS,IAAI,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EACzB,MAAMC,QAAQ,GAAGZ,MAAM,CAACU,IAAI,CAACG,GAAG,CAAC,mBAAMX,KAAK,CAACY,SAAS,CAAC,CAAC,CAAC,CAAC;EAC1Df,SAAS,CAAC,MAAM;IACZ,IAAIW,IAAI,CAACK,MAAM,KAAK,CAAC,EACjBN,WAAW,CAAC;MAAEO,IAAI,EAAEV,GAAG;MAAEW,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,KAE3CR,WAAW,CAAC;MAAEO,IAAI,EAAE,IAAI;MAAEC,QAAQ,EAAEX;IAAI,CAAC,CAAC;EAClD,CAAC,EAAE,CAACA,GAAG,EAAEG,WAAW,CAAC,CAAC;EAEtB,oBACIL,OAAA;IAAAc,QAAA,EACKR,IAAI,CAACG,GAAG,CAAC,CAACM,IAAI,EAAEC,KAAK,KAAK;MACvB,oBAAOhB,OAAA;QAAMiB,GAAG,EAAET,QAAQ,CAACU,OAAQ;QAACC,OAAO,EAAEA,CAAA,KAAKhB,WAAW,CAACY,IAAI,EAACK,QAAQ,GAAGZ,QAAQ,CAACU,OAAO,CAACF,KAAK,CAAC,CAAE;QAAAF,QAAA,EAAgB,MAAKC,IAAK;MAAG,GAAvBC,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA0B,CAAC;IACjJ,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACpB,EAAA,CAlBuBH,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}