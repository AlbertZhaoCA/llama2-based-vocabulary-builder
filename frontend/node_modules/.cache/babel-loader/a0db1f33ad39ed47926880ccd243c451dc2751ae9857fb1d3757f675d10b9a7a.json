{"ast":null,"code":"var _jsxFileName = \"/Users/albert/Desktop/web/my-app/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../App.css';\nimport { InputWithButton } from './Input';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function searchVocab(word) {\n  let resp = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n  let data = await resp.json();\n  return data;\n}\nfunction App() {\n  _s();\n  let initial = {\n    '单词': 'Hello',\n    '解释': '你好',\n    '词族': ['greeting', 'salutation']\n  };\n  const [vocabList, setVocabList] = useState([initial]);\n  const [inputid, setinputId] = useState(0);\n  const [submit, setSubmit] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  function handler0() {\n    searchVocab(inputValue).then(data => {\n      console.log(data);\n      let word = data[0].word;\n      let meaning = data[0].meanings[0].definitions[0].definition;\n      let synonyms = data[0].meanings[0].definitions[0].synonyms;\n      let newVocab = {\n        '单词': word,\n        '解释': meaning,\n        '词族': synonyms\n      };\n      setVocabList([...vocabList, newVocab]);\n    });\n    setVocabList([...vocabList, {\n      '单词': inputValue\n    }]);\n    setInputValue('');\n  }\n  function handler1() {\n    console.log('Button clicked');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", vocabList.map((key, index) => {\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Object.entries(key).map(([key, value], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: `${key}: ${value}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 61\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 16\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", inputValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(InputWithButton, {\n      id: inputid,\n      value: inputValue,\n      type: \"text\",\n      onChange: e => {\n        setInputValue(e.target.value);\n      },\n      onClick0: handler0,\n      onClick1: handler1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"0bpw5CwNGpe0L3/MsCBI1X8OvqA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputWithButton","jsxDEV","_jsxDEV","Fragment","_Fragment","searchVocab","word","resp","fetch","data","json","App","_s","initial","vocabList","setVocabList","inputid","setinputId","submit","setSubmit","inputValue","setInputValue","handler0","then","console","log","meaning","meanings","definitions","definition","synonyms","newVocab","handler1","children","map","key","index","Object","entries","value","fileName","_jsxFileName","lineNumber","columnNumber","id","type","onChange","e","target","onClick0","onClick1","_c","$RefreshReg$"],"sources":["/Users/albert/Desktop/web/my-app/src/components/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../App.css';\nimport { InputWithButton } from './Input';\n\nasync function searchVocab(word) {\n  let resp = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n  let data = await resp.json()\n  return data\n\n}\n\n\n  function App() {\n\n    let initial ={\n      '单词': 'Hello',\n      '解释': '你好',\n      '词族': ['greeting','salutation']\n      }\n\n  const [vocabList,setVocabList] = useState([initial]);\n  const [inputid,setinputId] = useState(0);\n  const [submit,setSubmit] = useState(false);\n  const [inputValue,setInputValue] = useState('');\n\n\n  function handler0(){\n    \n    searchVocab(inputValue).then(data => {\n      console.log(data)\n      let word = data[0].word\n      let meaning = data[0].meanings[0].definitions[0].definition\n      let synonyms = data[0].meanings[0].definitions[0].synonyms\n      let newVocab = {\n        '单词': word,\n        '解释': meaning,\n        '词族': synonyms\n      }\n      setVocabList([...vocabList,newVocab])\n    })\n    setVocabList([...vocabList,{'单词':inputValue}]);\n    setInputValue('');\n  }\n  function handler1(){\n    console.log('Button clicked');\n  }\n\n  return (\n    <> \n    <div> {\n      vocabList.map((key, index) => {\n        return <ul key={index}>\n          {Object.entries(key).map(([key, value], index) => <li key={index}>{`${key}: ${value}`}</li>)}\n        </ul>\n      })\n    } \n    </div>\n\n    <div>\n      <p> {inputValue}</p>\n    </div>\n    <InputWithButton id={inputid} value={inputValue}  type=\"text\"  onChange={\n      (e) =>{\n       setInputValue(e.target.value);\n    }\n    } onClick0={handler0} onClick1={handler1} />\n\n  \n  \n  \n  </>\n    \n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}